{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Analysis of COVID-19 survey Data source https://github.com/Ak1714/covid19_survey/tree/master/data Summary The motivation behind the project was to capture sentiments of people (both familiar and unfamiliar) related to the novel coronavirus and to get some hands-on practice with pandas and Tableau. The resulting data is a slightly biased since it was only collected for the aforementioned purposes. Survey The survey was sent to people, mostly friends and family in the US, India & Canada, stuck at home during the pandemic. A total of 114 people responded. The survey had 8 questions: Q1. What is your occupation? * Student * Professional * Home-maker * Retired * Other (free text field) Q2. Where do you spend most of your free time? (all are fixed values) * Streaming services (Netflix, Amazon Prime, Youtube) * Gaming (Mobile, Xbox, Nintendo) * Online Courses (Coursera, LinkedIn Learning, Udemy) * Social Media (Twitter, Instagram, Facebook) * Working (I'm a workaholic !) * Other (Gardening, Cooking, Sleeping) Q3. How much time do you spend on streaming services? Q4. How much time do you spend on gaming? Q5. How much time do you spend on social media? Questions 3, 4 & 5 all have fixed values: < 1 hour, 1 - 3 hours & > 3 hours Q6. What are you most worried about during this time? * Job * Family * Economy * Job * Being stuck at home * Other (free text field) Q7. ONE word that describes your mood right now. * (free text field) Q8. Where are you located ? * India * US * Other (free text field) The last question was added later that should explain the NULLs. All questions were mandatory questions except for Q3, Q4 & Q5.","title":"Home"},{"location":"#project","text":"Analysis of COVID-19 survey","title":"Project"},{"location":"#data-source","text":"https://github.com/Ak1714/covid19_survey/tree/master/data","title":"Data source"},{"location":"#summary","text":"The motivation behind the project was to capture sentiments of people (both familiar and unfamiliar) related to the novel coronavirus and to get some hands-on practice with pandas and Tableau. The resulting data is a slightly biased since it was only collected for the aforementioned purposes.","title":"Summary"},{"location":"#survey","text":"The survey was sent to people, mostly friends and family in the US, India & Canada, stuck at home during the pandemic. A total of 114 people responded. The survey had 8 questions: Q1. What is your occupation? * Student * Professional * Home-maker * Retired * Other (free text field) Q2. Where do you spend most of your free time? (all are fixed values) * Streaming services (Netflix, Amazon Prime, Youtube) * Gaming (Mobile, Xbox, Nintendo) * Online Courses (Coursera, LinkedIn Learning, Udemy) * Social Media (Twitter, Instagram, Facebook) * Working (I'm a workaholic !) * Other (Gardening, Cooking, Sleeping) Q3. How much time do you spend on streaming services? Q4. How much time do you spend on gaming? Q5. How much time do you spend on social media? Questions 3, 4 & 5 all have fixed values: < 1 hour, 1 - 3 hours & > 3 hours Q6. What are you most worried about during this time? * Job * Family * Economy * Job * Being stuck at home * Other (free text field) Q7. ONE word that describes your mood right now. * (free text field) Q8. Where are you located ? * India * US * Other (free text field) The last question was added later that should explain the NULLs. All questions were mandatory questions except for Q3, Q4 & Q5.","title":"Survey"},{"location":"COVID/","text":"Importing libraries Importing pandas and numpy libraries and reading the survey data into the dataframe - 'covidDF' import pandas as pd covidDF = pd.read_csv(\"COVID-19 Survey (Responses) - Form responses 1.csv\") covidDF.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Timestamp What is your occupation? Where do you spend most of your free time? How much time do you spend on streaming services? How much time do you spend on gaming? How much time do you spend on social media? What are you most worried about during this time? ONE word that describes your mood right now. Where are you located ? 0 29/03/2020 00:22:00 Professional Other (Gardening, Cooking, Sleeping) > 3 hours 1 - 3 hours < 1 hour Family, Economy, Being stuck at home Happy NaN 1 29/03/2020 00:26:52 Student Online Courses (Coursera, LinkedIn Learning, U... < 1 hour < 1 hour 1 - 3 hours Job, Family, Being stuck at home Irritated NaN 2 29/03/2020 00:37:44 Professional Online Courses (Coursera, LinkedIn Learning, U... > 3 hours < 1 hour 1 - 3 hours Job Bored NaN 3 29/03/2020 00:38:23 Home-maker Social Media (Twitter, Instagram, Facebook) < 1 hour < 1 hour 1 - 3 hours Family Depression NaN 4 29/03/2020 00:38:35 Professional Streaming services (Netflix, Amazon Prime, You... > 3 hours < 1 hour > 3 hours Job, Family Aimless NaN Checking for NULLs Checking if the dataframe has null values covidDF.isnull().sum() Timestamp 0 What is your occupation? 0 Where do you spend most of your free time? 0 How much time do you spend on streaming services? 4 How much time do you spend on gaming? 9 How much time do you spend on social media? 3 What are you most worried about during this time? 0 ONE word that describes your mood right now. 0 Where are you located ? 65 dtype: int64 covidDF.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Timestamp What is your occupation? Where do you spend most of your free time? How much time do you spend on streaming services? How much time do you spend on gaming? How much time do you spend on social media? What are you most worried about during this time? ONE word that describes your mood right now. Where are you located ? unique 114 7 6 3 3 3 31 87 4 freq 1 64 34 57 88 55 31 9 25 Mood in ONE word The last column 'ONE word that describes your mood right now.' is a free text field. However some respondents have replied in more than one word. We can edit this field by grouping similar words or feelings into a single word import re # RegEx # creating a dataframe with only the required column which can be later merged with the original dataframe 'CovidDF' one_word = pd.DataFrame(covidDF[\"ONE word that describes your mood right now.\"]).astype(str) # The re.match function returns a 'None' if there is no match for i in one_word.index: if re.match( r'(.*)([Bb]or)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Bored\" one_word # Let's have a look at the new dataframe .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 1 Irritated 3 Depression ... ... 110 Okay 112 Juggling Repeating the same steps to look for words that might have the similar meaning for i in one_word.index: if re.match( r'(.*)([cC]onc)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Concerned\" elif re.match( r'(.*)([wW]orr)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Worried\" elif re.match( r'(.*)([sS]car)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Scared\" one_word .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 1 Irritated 3 Depression ... ... 110 Okay 112 Juggling for i in one_word.index: if re.match( r'(.*)([gG]oo)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Good\" elif re.match( r'(.*)([sS]ad)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Sad\" one_word .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 1 Irritated 3 Depression ... ... 110 Okay 112 Juggling for i in one_word.index: if re.match( r'([aA]nx)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Anxious\" elif re.match( r'(.*)([hH]ap)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Happy\" one_word .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 1 Irritated 3 Depression ... ... 110 Okay 112 Juggling for i in one_word.index: if re.match(r'(.*\\s.*\\s.*\\S)', str(one_word.iloc[i][0])) != None: print([i],one_word.iloc[i][0]) [10] Enjoying lockdown condition which never experienced in life [15] Learn something new [27] Lazy and tired [45] Feeling low due to current situation [47] Find a Cure for COVID-19 [48] Optimistic that this phase will pass away one day. [51] Faith in god [66] I am optimistic [69] Just want the country to do well [80] 80% Relaxed 20% anxious [89] Need work from home [101] Normal, as I am used to work from home [105] Self descipline, face situation be prepaired [113] Going with the flow one_word.iloc[10] = \"Enjoying\" one_word.iloc[15] = \"Good\" one_word.iloc[27] = \"Lazy\" one_word.iloc[45] = \"Low\" one_word.iloc[47] = \"Worried\" one_word.iloc[51] = \"Hopeful\" one_word.iloc[66] = \"Optimistic\" one_word.iloc[69] = \"Hopeful\" one_word.iloc[80] = \"Relaxed\" one_word.iloc[89] = \"Stressed\" one_word.iloc[101] = \"Normal\" one_word.iloc[105] = \"Prepared\" one_word.iloc[113] = \"Normal\" for i in one_word.index: if re.match(r'(.*\\s.*\\S)', str(one_word.iloc[i][0])) != None: print([i],one_word.iloc[i][0]) [22] Aai Baba [32] Active mood [48] Optimistic that this phase will pass away one day. [61] optimistic, peaceful for i in one_word.index: if re.match( r'([oO]pt)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Optimistic\" one_word.iloc[22] = \"Worried\" one_word.iloc[32] = \"Active\" one_word['ONE word that describes your mood right now.'].value_counts() Bored 20 Worried 7 Good 5 Anxious 5 Happy 5 Optimistic 4 Normal 4 Chill 4 Scared 3 Relaxed 3 Sad 2 Hopeful 2 Lazy 2 Calm 2 Tired 2 Stressed 2 Concerned 2 bewildered 1 Confused 1 Pessimistic 1 Depression 1 Content 1 Frustated 1 claustrophobic 1 Low 1 Frustrated 1 Tensed 1 Aimless 1 Exhausted 1 Praying 1 Imprisoned 1 Prayerful. 1 Okay 1 Juggling 1 Lazy 1 Contented 1 Annoyed 1 Hungry 1 Terrible 1 Enjoing 1 Aimless 1 Lethargic 1 Irritating 1 Tension 1 Angry 1 Enjoying 1 Irritated 1 Calm 1 Prepared 1 Depleted 1 Active 1 HAPPY 1 Busy 1 Energetic 1 Stressed 1 Distancing 1 Discouraged 1 Name: ONE word that describes your mood right now., dtype: int64 covidDF['Mood in One Word'] = one_word['ONE word that describes your mood right now.'] covidDF.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Timestamp What is your occupation? Where do you spend most of your free time? How much time do you spend on streaming services? How much time do you spend on gaming? How much time do you spend on social media? What are you most worried about during this time? ONE word that describes your mood right now. Where are you located ? Mood in One Word 1 29/03/2020 00:26:52 Student Online Courses (Coursera, LinkedIn Learning, U... < 1 hour < 1 hour 1 - 3 hours Job, Family, Being stuck at home Irritated NaN Irritated 3 29/03/2020 00:38:23 Home-maker Social Media (Twitter, Instagram, Facebook) < 1 hour < 1 hour 1 - 3 hours Family Depression NaN Depression Profession profession = ['Professional','Student','Home-maker','Retired'] for i in covidDF['What is your occupation?'].index: if covidDF.iloc[i][1] not in profession: print(i, covidDF.loc[i][1]) 13 Retired Mathematics Professor 47 Business 57 Nurse practitioner occ = pd.DataFrame(covidDF['What is your occupation?']).astype(str) covidDF['What is your occupation?'].value_counts() Professional 64 Student 35 Home-maker 7 Retired 5 Retired Mathematics Professor 1 Nurse practitioner 1 Business 1 Name: What is your occupation?, dtype: int64 occ.iloc[13]['What is your occupation?'] = \"Retired\" occ.iloc[47]['What is your occupation?'] = \"Professional\" occ.iloc[57]['What is your occupation?'] = \"Professional\" covidDF['Occupation'] = occ['What is your occupation?'] covidDF['Occupation'].value_counts() Professional 66 Student 35 Home-maker 7 Retired 6 Name: Occupation, dtype: int64 NULL imputation covidDF.isnull().sum() Timestamp 0 What is your occupation? 0 Where do you spend most of your free time? 0 How much time do you spend on streaming services? 4 How much time do you spend on gaming? 9 How much time do you spend on social media? 3 What are you most worried about during this time? 0 ONE word that describes your mood right now. 0 Where are you located ? 65 Mood in One Word 0 Occupation 0 dtype: int64 covidDF.loc[covidDF['How much time do you spend on gaming?'] == '< 1 hour',('Where do you spend most of your free time?')] 1 Online Courses (Coursera, LinkedIn Learning, U... 2 Online Courses (Coursera, LinkedIn Learning, U... 3 Social Media (Twitter, Instagram, Facebook) 4 Streaming services (Netflix, Amazon Prime, You... 5 Other (Gardening, Cooking, Sleeping) ... 108 Streaming services (Netflix, Amazon Prime, You... 109 Other (Gardening, Cooking, Sleeping) 110 Other (Gardening, Cooking, Sleeping) 111 Streaming services (Netflix, Amazon Prime, You... 112 Streaming services (Netflix, Amazon Prime, You... Name: Where do you spend most of your free time?, Length: 88, dtype: object covidDF['How much time do you spend on streaming services?'] = covidDF['How much time do you spend on streaming services?'].fillna('< 1 hour') covidDF['How much time do you spend on streaming services?'].isnull().sum() 0 covidDF.isnull().sum() Timestamp 0 What is your occupation? 0 Where do you spend most of your free time? 0 How much time do you spend on streaming services? 0 How much time do you spend on gaming? 9 How much time do you spend on social media? 3 What are you most worried about during this time? 0 ONE word that describes your mood right now. 0 Where are you located ? 65 Mood in One Word 0 Occupation 0 dtype: int64 covidDF['How much time do you spend on gaming?'] = covidDF['How much time do you spend on gaming?'].fillna('< 1 hour') covidDF['How much time do you spend on gaming?'].isnull().sum() 0 covidDF['How much time do you spend on social media?'] = covidDF['How much time do you spend on social media?'].fillna('< 1 hour') covidDF['How much time do you spend on social media?'].isnull().sum() 0 Worried about? covidDF['What are you most worried about during this time?'] 0 Family, Economy, Being stuck at home 1 Job, Family, Being stuck at home 2 Job 3 Family 4 Job, Family ... 109 Family 110 Family 111 Not necessary for you to know 112 Unknown Consequences later 113 Job, Family, Economy Name: What are you most worried about during this time?, Length: 114, dtype: object c = covidDF['What are you most worried about during this time?'].value_counts() c['Family'].sum() c Family 31 Economy 12 Being stuck at home 11 Job, Family, Economy 7 Job 7 Job, Family, Economy, Being stuck at home 7 Family, Economy, Being stuck at home 5 Job, Family 5 Job, Family, Being stuck at home 3 Family, Economy 3 Family, Being stuck at home 2 Job, Economy 2 Health 1 Overcoming the present situation 1 Lokha Sanastha dukkho Bhavantu 1 not worried as things will improve 1 Uni 1 Can\u2019t travel 1 How to keep healthy 1 Travel plans 1 Job, Economy, Being stuck at home 1 Job, Economy, Being stuck at home, My future 1 When will the situation be under control 1 Unknown Consequences later 1 To get more knowledge 1 Family, Education 1 Economy, Being stuck at home 1 Exams 1 Study. 1 Not necessary for you to know 1 Academic session and exams 1 Name: What are you most worried about during this time?, dtype: int64 looper = covidDF['What are you most worried about during this time?'] Family = [] for i in looper.index: if re.match( r'(.*)[fF]am(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) Family.append(1) else: Family.append(0) print(Family) [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1] Economy = [] for i in looper.index: #print(looper.iloc[i]) if re.match( r'(.*)Econo(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) Economy.append(1) else: Economy.append(0) print(Economy) [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1] Job = [] for i in looper.index: if re.match( r'(.*)Job(.*)', str(looper.iloc[i])) != None: Job.append(1) else: Job.append(0) print(Job) [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1] Stuck = [] for i in looper.index: if re.match( r'(.*)Being\\s[sS](.*)\\s(.*)', str(looper.iloc[i])) != None: Stuck.append(1) else: Stuck.append(0) print(Stuck) [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0] other = [] for i in looper.index: if re.match( r'(.*)Being\\s[sS](.*)\\s(.*)', str(looper.iloc[i])) != None or re.match(r'(.*)Job(.*)', str(looper.iloc[i])) != None or re.match(r'Fam(.*)', str(looper.iloc[i])) != None or re.match(r'(.*)Econo(.*)', str(looper.iloc[i])) != None: other.append(0) else: other.append(1) print(other) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0] occupation_df = pd.DataFrame(list(zip(Stuck, Job, Economy, Family, other)), columns = ['Stuck','Job','Economy','Family','other']) cat = occupation_df.sum() cat.sum() occupation_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Stuck Job Economy Family other 1 1 1 0 1 0 3 0 0 0 1 0 ... ... ... ... ... ... 110 0 0 0 1 0 112 0 0 0 0 1 covidDF[['Stuck','Job','Economy','Family','other']] = occupation_df[['Stuck','Job','Economy','Family','other']] covidDF covidDF.to_csv('COVID19_SurveyResponses.csv') covidDF['Occupation'].value_counts() Professional 66 Student 35 Home-maker 7 Retired 6 Name: Occupation, dtype: int64","title":"Analysis"},{"location":"COVID/#importing-libraries","text":"Importing pandas and numpy libraries and reading the survey data into the dataframe - 'covidDF' import pandas as pd covidDF = pd.read_csv(\"COVID-19 Survey (Responses) - Form responses 1.csv\") covidDF.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Timestamp What is your occupation? Where do you spend most of your free time? How much time do you spend on streaming services? How much time do you spend on gaming? How much time do you spend on social media? What are you most worried about during this time? ONE word that describes your mood right now. Where are you located ? 0 29/03/2020 00:22:00 Professional Other (Gardening, Cooking, Sleeping) > 3 hours 1 - 3 hours < 1 hour Family, Economy, Being stuck at home Happy NaN 1 29/03/2020 00:26:52 Student Online Courses (Coursera, LinkedIn Learning, U... < 1 hour < 1 hour 1 - 3 hours Job, Family, Being stuck at home Irritated NaN 2 29/03/2020 00:37:44 Professional Online Courses (Coursera, LinkedIn Learning, U... > 3 hours < 1 hour 1 - 3 hours Job Bored NaN 3 29/03/2020 00:38:23 Home-maker Social Media (Twitter, Instagram, Facebook) < 1 hour < 1 hour 1 - 3 hours Family Depression NaN 4 29/03/2020 00:38:35 Professional Streaming services (Netflix, Amazon Prime, You... > 3 hours < 1 hour > 3 hours Job, Family Aimless NaN","title":"Importing libraries"},{"location":"COVID/#checking-for-nulls","text":"Checking if the dataframe has null values covidDF.isnull().sum() Timestamp 0 What is your occupation? 0 Where do you spend most of your free time? 0 How much time do you spend on streaming services? 4 How much time do you spend on gaming? 9 How much time do you spend on social media? 3 What are you most worried about during this time? 0 ONE word that describes your mood right now. 0 Where are you located ? 65 dtype: int64 covidDF.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Timestamp What is your occupation? Where do you spend most of your free time? How much time do you spend on streaming services? How much time do you spend on gaming? How much time do you spend on social media? What are you most worried about during this time? ONE word that describes your mood right now. Where are you located ? unique 114 7 6 3 3 3 31 87 4 freq 1 64 34 57 88 55 31 9 25","title":"Checking for NULLs"},{"location":"COVID/#mood-in-one-word","text":"The last column 'ONE word that describes your mood right now.' is a free text field. However some respondents have replied in more than one word. We can edit this field by grouping similar words or feelings into a single word import re # RegEx # creating a dataframe with only the required column which can be later merged with the original dataframe 'CovidDF' one_word = pd.DataFrame(covidDF[\"ONE word that describes your mood right now.\"]).astype(str) # The re.match function returns a 'None' if there is no match for i in one_word.index: if re.match( r'(.*)([Bb]or)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Bored\" one_word # Let's have a look at the new dataframe .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 1 Irritated 3 Depression ... ... 110 Okay 112 Juggling Repeating the same steps to look for words that might have the similar meaning for i in one_word.index: if re.match( r'(.*)([cC]onc)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Concerned\" elif re.match( r'(.*)([wW]orr)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Worried\" elif re.match( r'(.*)([sS]car)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Scared\" one_word .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 1 Irritated 3 Depression ... ... 110 Okay 112 Juggling for i in one_word.index: if re.match( r'(.*)([gG]oo)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Good\" elif re.match( r'(.*)([sS]ad)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Sad\" one_word .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 1 Irritated 3 Depression ... ... 110 Okay 112 Juggling for i in one_word.index: if re.match( r'([aA]nx)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Anxious\" elif re.match( r'(.*)([hH]ap)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Happy\" one_word .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 1 Irritated 3 Depression ... ... 110 Okay 112 Juggling for i in one_word.index: if re.match(r'(.*\\s.*\\s.*\\S)', str(one_word.iloc[i][0])) != None: print([i],one_word.iloc[i][0]) [10] Enjoying lockdown condition which never experienced in life [15] Learn something new [27] Lazy and tired [45] Feeling low due to current situation [47] Find a Cure for COVID-19 [48] Optimistic that this phase will pass away one day. [51] Faith in god [66] I am optimistic [69] Just want the country to do well [80] 80% Relaxed 20% anxious [89] Need work from home [101] Normal, as I am used to work from home [105] Self descipline, face situation be prepaired [113] Going with the flow one_word.iloc[10] = \"Enjoying\" one_word.iloc[15] = \"Good\" one_word.iloc[27] = \"Lazy\" one_word.iloc[45] = \"Low\" one_word.iloc[47] = \"Worried\" one_word.iloc[51] = \"Hopeful\" one_word.iloc[66] = \"Optimistic\" one_word.iloc[69] = \"Hopeful\" one_word.iloc[80] = \"Relaxed\" one_word.iloc[89] = \"Stressed\" one_word.iloc[101] = \"Normal\" one_word.iloc[105] = \"Prepared\" one_word.iloc[113] = \"Normal\" for i in one_word.index: if re.match(r'(.*\\s.*\\S)', str(one_word.iloc[i][0])) != None: print([i],one_word.iloc[i][0]) [22] Aai Baba [32] Active mood [48] Optimistic that this phase will pass away one day. [61] optimistic, peaceful for i in one_word.index: if re.match( r'([oO]pt)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Optimistic\" one_word.iloc[22] = \"Worried\" one_word.iloc[32] = \"Active\" one_word['ONE word that describes your mood right now.'].value_counts() Bored 20 Worried 7 Good 5 Anxious 5 Happy 5 Optimistic 4 Normal 4 Chill 4 Scared 3 Relaxed 3 Sad 2 Hopeful 2 Lazy 2 Calm 2 Tired 2 Stressed 2 Concerned 2 bewildered 1 Confused 1 Pessimistic 1 Depression 1 Content 1 Frustated 1 claustrophobic 1 Low 1 Frustrated 1 Tensed 1 Aimless 1 Exhausted 1 Praying 1 Imprisoned 1 Prayerful. 1 Okay 1 Juggling 1 Lazy 1 Contented 1 Annoyed 1 Hungry 1 Terrible 1 Enjoing 1 Aimless 1 Lethargic 1 Irritating 1 Tension 1 Angry 1 Enjoying 1 Irritated 1 Calm 1 Prepared 1 Depleted 1 Active 1 HAPPY 1 Busy 1 Energetic 1 Stressed 1 Distancing 1 Discouraged 1 Name: ONE word that describes your mood right now., dtype: int64 covidDF['Mood in One Word'] = one_word['ONE word that describes your mood right now.'] covidDF.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Timestamp What is your occupation? Where do you spend most of your free time? How much time do you spend on streaming services? How much time do you spend on gaming? How much time do you spend on social media? What are you most worried about during this time? ONE word that describes your mood right now. Where are you located ? Mood in One Word 1 29/03/2020 00:26:52 Student Online Courses (Coursera, LinkedIn Learning, U... < 1 hour < 1 hour 1 - 3 hours Job, Family, Being stuck at home Irritated NaN Irritated 3 29/03/2020 00:38:23 Home-maker Social Media (Twitter, Instagram, Facebook) < 1 hour < 1 hour 1 - 3 hours Family Depression NaN Depression","title":"Mood in ONE word"},{"location":"COVID/#profession","text":"profession = ['Professional','Student','Home-maker','Retired'] for i in covidDF['What is your occupation?'].index: if covidDF.iloc[i][1] not in profession: print(i, covidDF.loc[i][1]) 13 Retired Mathematics Professor 47 Business 57 Nurse practitioner occ = pd.DataFrame(covidDF['What is your occupation?']).astype(str) covidDF['What is your occupation?'].value_counts() Professional 64 Student 35 Home-maker 7 Retired 5 Retired Mathematics Professor 1 Nurse practitioner 1 Business 1 Name: What is your occupation?, dtype: int64 occ.iloc[13]['What is your occupation?'] = \"Retired\" occ.iloc[47]['What is your occupation?'] = \"Professional\" occ.iloc[57]['What is your occupation?'] = \"Professional\" covidDF['Occupation'] = occ['What is your occupation?'] covidDF['Occupation'].value_counts() Professional 66 Student 35 Home-maker 7 Retired 6 Name: Occupation, dtype: int64","title":"Profession"},{"location":"COVID/#null-imputation","text":"covidDF.isnull().sum() Timestamp 0 What is your occupation? 0 Where do you spend most of your free time? 0 How much time do you spend on streaming services? 4 How much time do you spend on gaming? 9 How much time do you spend on social media? 3 What are you most worried about during this time? 0 ONE word that describes your mood right now. 0 Where are you located ? 65 Mood in One Word 0 Occupation 0 dtype: int64 covidDF.loc[covidDF['How much time do you spend on gaming?'] == '< 1 hour',('Where do you spend most of your free time?')] 1 Online Courses (Coursera, LinkedIn Learning, U... 2 Online Courses (Coursera, LinkedIn Learning, U... 3 Social Media (Twitter, Instagram, Facebook) 4 Streaming services (Netflix, Amazon Prime, You... 5 Other (Gardening, Cooking, Sleeping) ... 108 Streaming services (Netflix, Amazon Prime, You... 109 Other (Gardening, Cooking, Sleeping) 110 Other (Gardening, Cooking, Sleeping) 111 Streaming services (Netflix, Amazon Prime, You... 112 Streaming services (Netflix, Amazon Prime, You... Name: Where do you spend most of your free time?, Length: 88, dtype: object covidDF['How much time do you spend on streaming services?'] = covidDF['How much time do you spend on streaming services?'].fillna('< 1 hour') covidDF['How much time do you spend on streaming services?'].isnull().sum() 0 covidDF.isnull().sum() Timestamp 0 What is your occupation? 0 Where do you spend most of your free time? 0 How much time do you spend on streaming services? 0 How much time do you spend on gaming? 9 How much time do you spend on social media? 3 What are you most worried about during this time? 0 ONE word that describes your mood right now. 0 Where are you located ? 65 Mood in One Word 0 Occupation 0 dtype: int64 covidDF['How much time do you spend on gaming?'] = covidDF['How much time do you spend on gaming?'].fillna('< 1 hour') covidDF['How much time do you spend on gaming?'].isnull().sum() 0 covidDF['How much time do you spend on social media?'] = covidDF['How much time do you spend on social media?'].fillna('< 1 hour') covidDF['How much time do you spend on social media?'].isnull().sum() 0","title":"NULL imputation"},{"location":"COVID/#worried-about","text":"covidDF['What are you most worried about during this time?'] 0 Family, Economy, Being stuck at home 1 Job, Family, Being stuck at home 2 Job 3 Family 4 Job, Family ... 109 Family 110 Family 111 Not necessary for you to know 112 Unknown Consequences later 113 Job, Family, Economy Name: What are you most worried about during this time?, Length: 114, dtype: object c = covidDF['What are you most worried about during this time?'].value_counts() c['Family'].sum() c Family 31 Economy 12 Being stuck at home 11 Job, Family, Economy 7 Job 7 Job, Family, Economy, Being stuck at home 7 Family, Economy, Being stuck at home 5 Job, Family 5 Job, Family, Being stuck at home 3 Family, Economy 3 Family, Being stuck at home 2 Job, Economy 2 Health 1 Overcoming the present situation 1 Lokha Sanastha dukkho Bhavantu 1 not worried as things will improve 1 Uni 1 Can\u2019t travel 1 How to keep healthy 1 Travel plans 1 Job, Economy, Being stuck at home 1 Job, Economy, Being stuck at home, My future 1 When will the situation be under control 1 Unknown Consequences later 1 To get more knowledge 1 Family, Education 1 Economy, Being stuck at home 1 Exams 1 Study. 1 Not necessary for you to know 1 Academic session and exams 1 Name: What are you most worried about during this time?, dtype: int64 looper = covidDF['What are you most worried about during this time?'] Family = [] for i in looper.index: if re.match( r'(.*)[fF]am(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) Family.append(1) else: Family.append(0) print(Family) [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1] Economy = [] for i in looper.index: #print(looper.iloc[i]) if re.match( r'(.*)Econo(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) Economy.append(1) else: Economy.append(0) print(Economy) [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1] Job = [] for i in looper.index: if re.match( r'(.*)Job(.*)', str(looper.iloc[i])) != None: Job.append(1) else: Job.append(0) print(Job) [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1] Stuck = [] for i in looper.index: if re.match( r'(.*)Being\\s[sS](.*)\\s(.*)', str(looper.iloc[i])) != None: Stuck.append(1) else: Stuck.append(0) print(Stuck) [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0] other = [] for i in looper.index: if re.match( r'(.*)Being\\s[sS](.*)\\s(.*)', str(looper.iloc[i])) != None or re.match(r'(.*)Job(.*)', str(looper.iloc[i])) != None or re.match(r'Fam(.*)', str(looper.iloc[i])) != None or re.match(r'(.*)Econo(.*)', str(looper.iloc[i])) != None: other.append(0) else: other.append(1) print(other) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0] occupation_df = pd.DataFrame(list(zip(Stuck, Job, Economy, Family, other)), columns = ['Stuck','Job','Economy','Family','other']) cat = occupation_df.sum() cat.sum() occupation_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Stuck Job Economy Family other 1 1 1 0 1 0 3 0 0 0 1 0 ... ... ... ... ... ... 110 0 0 0 1 0 112 0 0 0 0 1 covidDF[['Stuck','Job','Economy','Family','other']] = occupation_df[['Stuck','Job','Economy','Family','other']] covidDF covidDF.to_csv('COVID19_SurveyResponses.csv') covidDF['Occupation'].value_counts() Professional 66 Student 35 Home-maker 7 Retired 6 Name: Occupation, dtype: int64","title":"Worried about?"}]}