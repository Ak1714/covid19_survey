{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage with project summary LCDA_Part1.md # Analyzing and vizualizing the data LCDA_Part2.md # Clustering & PCA LCDA_Part3.md # Building models Data source https://www.kaggle.com/wordsforthewise/lending-club Summary Lending Club is the world\u2019s leading online marketplace for connecting borrowers and investors. In this project the goal is to build a robust model using logistic regression and classification tree for predicting the final status of a loan based on variables available at the time when the loan is granted. Vetting data Reading the lendingdataclub 2017 Q3 csv file and scanning the file for all columns by skipping the first line since it is not required. colNames <- scan(\"LoanStats2017Q3.csv\", what=\"character\", skip=1, nlines=1, sep=\",\") Specifying the character and factor columns for categorical data, since rest of it is mostly numerical and date data. characterColumns <- c(\"id\", \"member_id\", \"emp_title\", \"issue_d\", \"url\", \"desc\", \"zip_code\", \"addr_state\", \"earliest_cr_line\", \"last_pymnt_d\", \"next_pymnt_d\", \"last_credit_pull_d\", \"sec_app_earliest_cr_line\", \"hardship_type\", \"hardship_reason\", \"hardship_start_date\", \"hardship_end_date\", \"payment_plan_start_date\", \"debt_settlement_flag_date\", \"settlement_date\") factorColumns <- c(\"term\", \"grade\", \"sub_grade\", \"emp_length\", \"home_ownership\", \"verification_status\", \"loan_status\", \"pymnt_plan\", \"purpose\", \"title\", \"initial_list_status\", \"policy_code\", \"application_type\", \"verification_status_joint\", \"hardship_flag\", \"hardship_status\", \"hardship_loan_status\", \"disbursement_method\", \"debt_settlement_flag\", \"settlement_status\") Excluding the top two rows and any other row that is not part of the main data by specifying the exact number of rows (122701) lendingRows <- 122701 lendingData <- read.table(\"LoanStats2017Q3.csv\", skip=1, sep=\",\", nrows=lendingRows, colClasses = myColClasses, header=TRUE) After reading the columns, two columns: revol_util and int_rate have % signs. We don\u2019t want R to interpret it as character strings. Hence, we can convert to character strings and getting rid of the \u2018%\u2019 and then back to numeric. lendingData$revol_util <- as.character(lendingData$revol_util) lendingData$revol_util <- sub(\"%\", \"\", lendingData$revol_util) lendingData$revol_util <- as.numeric(lendingData$revol_util) lendingData$int_rate <- as.character(lendingData$int_rate) lendingData$int_rate <- sub(\"%\", \"\", lendingData$int_rate) lendingData$int_rate <- as.numeric(lendingData$int_rate) Formatting the columns for date data and specifying the first of the month since the data only has month and year. dateColumns <- c(\"issue_d\", \"last_pymnt_d\", \"next_pymnt_d\", \"last_credit_pull_d\", \"sec_app_earliest_cr_line\", \"hardship_start_date\", \"hardship_end_date\", \"payment_plan_start_date\", \"debt_settlement_flag_date\", \"settlement_date\", \"earliest_cr_line\") Using function strptime(x, format), where x is a character vector of dates and format is a character string of the dates, using percent symbols with characters to specify what types of date and time information.%d: Day of the month as decimal number (01--31)%b: Abbreviated month name in the current locale on this platform%Y: Year with century e.g.: 2015 lendingData[,dateColumns] <- apply(lendingData[,dateColumns], 2, function(x) { strptime(paste(\"1\", x), \"%d %b-%Y\")}) lendingData[,dateColumns] <- apply(lendingData[,dateColumns], 2, function(x) { strptime(paste(\"1\", x), \"%d %b-%Y\")}) Saving the file as R object for faster loading. Then counting the number of each loan status. save(lendingData, file=\"LoanStats2017Q3.rda\") load(\"LoanStats2017Q3.rda\") (table(lendingData$loan_status)) # Charged Off Current Default Fully Paid In Grace Period # 12876 65816 161 40471 752 # Late (16-30 days) Late (31-120 days) # 503 2122","title":"Home"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage with project summary LCDA_Part1.md # Analyzing and vizualizing the data LCDA_Part2.md # Clustering & PCA LCDA_Part3.md # Building models","title":"Project layout"},{"location":"#data-source","text":"https://www.kaggle.com/wordsforthewise/lending-club","title":"Data source"},{"location":"#summary","text":"Lending Club is the world\u2019s leading online marketplace for connecting borrowers and investors. In this project the goal is to build a robust model using logistic regression and classification tree for predicting the final status of a loan based on variables available at the time when the loan is granted.","title":"Summary"},{"location":"#vetting-data","text":"Reading the lendingdataclub 2017 Q3 csv file and scanning the file for all columns by skipping the first line since it is not required. colNames <- scan(\"LoanStats2017Q3.csv\", what=\"character\", skip=1, nlines=1, sep=\",\") Specifying the character and factor columns for categorical data, since rest of it is mostly numerical and date data. characterColumns <- c(\"id\", \"member_id\", \"emp_title\", \"issue_d\", \"url\", \"desc\", \"zip_code\", \"addr_state\", \"earliest_cr_line\", \"last_pymnt_d\", \"next_pymnt_d\", \"last_credit_pull_d\", \"sec_app_earliest_cr_line\", \"hardship_type\", \"hardship_reason\", \"hardship_start_date\", \"hardship_end_date\", \"payment_plan_start_date\", \"debt_settlement_flag_date\", \"settlement_date\") factorColumns <- c(\"term\", \"grade\", \"sub_grade\", \"emp_length\", \"home_ownership\", \"verification_status\", \"loan_status\", \"pymnt_plan\", \"purpose\", \"title\", \"initial_list_status\", \"policy_code\", \"application_type\", \"verification_status_joint\", \"hardship_flag\", \"hardship_status\", \"hardship_loan_status\", \"disbursement_method\", \"debt_settlement_flag\", \"settlement_status\") Excluding the top two rows and any other row that is not part of the main data by specifying the exact number of rows (122701) lendingRows <- 122701 lendingData <- read.table(\"LoanStats2017Q3.csv\", skip=1, sep=\",\", nrows=lendingRows, colClasses = myColClasses, header=TRUE) After reading the columns, two columns: revol_util and int_rate have % signs. We don\u2019t want R to interpret it as character strings. Hence, we can convert to character strings and getting rid of the \u2018%\u2019 and then back to numeric. lendingData$revol_util <- as.character(lendingData$revol_util) lendingData$revol_util <- sub(\"%\", \"\", lendingData$revol_util) lendingData$revol_util <- as.numeric(lendingData$revol_util) lendingData$int_rate <- as.character(lendingData$int_rate) lendingData$int_rate <- sub(\"%\", \"\", lendingData$int_rate) lendingData$int_rate <- as.numeric(lendingData$int_rate) Formatting the columns for date data and specifying the first of the month since the data only has month and year. dateColumns <- c(\"issue_d\", \"last_pymnt_d\", \"next_pymnt_d\", \"last_credit_pull_d\", \"sec_app_earliest_cr_line\", \"hardship_start_date\", \"hardship_end_date\", \"payment_plan_start_date\", \"debt_settlement_flag_date\", \"settlement_date\", \"earliest_cr_line\") Using function strptime(x, format), where x is a character vector of dates and format is a character string of the dates, using percent symbols with characters to specify what types of date and time information.%d: Day of the month as decimal number (01--31)%b: Abbreviated month name in the current locale on this platform%Y: Year with century e.g.: 2015 lendingData[,dateColumns] <- apply(lendingData[,dateColumns], 2, function(x) { strptime(paste(\"1\", x), \"%d %b-%Y\")}) lendingData[,dateColumns] <- apply(lendingData[,dateColumns], 2, function(x) { strptime(paste(\"1\", x), \"%d %b-%Y\")}) Saving the file as R object for faster loading. Then counting the number of each loan status. save(lendingData, file=\"LoanStats2017Q3.rda\") load(\"LoanStats2017Q3.rda\") (table(lendingData$loan_status)) # Charged Off Current Default Fully Paid In Grace Period # 12876 65816 161 40471 752 # Late (16-30 days) Late (31-120 days) # 503 2122","title":"Vetting data"},{"location":"COVID/","text":"Covid19 Survey Analysis # Importing pandas + numpy and reading the survey data into the dataframe - covidDF import pandas as pd import numpy as np covidDF = pd.read_csv(\"COVID-19 Survey (Responses) - Form responses 1.csv\") covidDF.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Timestamp What is your occupation? Where do you spend most of your free time? How much time do you spend on streaming services? How much time do you spend on gaming? How much time do you spend on social media? What are you most worried about during this time? ONE word that describes your mood right now. Where are you located ? 0 29/03/2020 00:22:00 Professional Other (Gardening, Cooking, Sleeping) > 3 hours 1 - 3 hours < 1 hour Family, Economy, Being stuck at home Happy NaN 1 29/03/2020 00:26:52 Student Online Courses (Coursera, LinkedIn Learning, U... < 1 hour < 1 hour 1 - 3 hours Job, Family, Being stuck at home Irritated NaN 2 29/03/2020 00:37:44 Professional Online Courses (Coursera, LinkedIn Learning, U... > 3 hours < 1 hour 1 - 3 hours Job Bored NaN 3 29/03/2020 00:38:23 Home-maker Social Media (Twitter, Instagram, Facebook) < 1 hour < 1 hour 1 - 3 hours Family Depression NaN 4 29/03/2020 00:38:35 Professional Streaming services (Netflix, Amazon Prime, You... > 3 hours < 1 hour > 3 hours Job, Family Aimless NaN # Checking if the dataframe has null values covidDF.isnull().sum() #displays entire dataframe with null and non-null values Timestamp 0 What is your occupation? 0 Where do you spend most of your free time? 0 How much time do you spend on streaming services? 4 How much time do you spend on gaming? 9 How much time do you spend on social media? 3 What are you most worried about during this time? 0 ONE word that describes your mood right now. 0 Where are you located ? 65 dtype: int64 covidDF.describe() # an overview .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Timestamp What is your occupation? Where do you spend most of your free time? How much time do you spend on streaming services? How much time do you spend on gaming? How much time do you spend on social media? What are you most worried about during this time? ONE word that describes your mood right now. Where are you located ? count 114 114 114 110 105 111 114 114 49 unique 114 7 6 3 3 3 31 87 4 top 29/03/2020 11:26:31 Professional Other (Gardening, Cooking, Sleeping) 1 - 3 hours < 1 hour 1 - 3 hours Family Bored USA freq 1 64 34 57 88 55 31 9 25 # The last column 'ONE word that describes your mood right now.' is a free text field # However some respondents have replied in more than one word. We can edit this field by grouping similar words or feelings into a single word import re # RegEx # creating a dataframe with only the required column which can be later merger with the original dataframe CovidDF one_word = pd.DataFrame(covidDF[\"ONE word that describes your mood right now.\"]).astype(str) # The re.match function returns a 'None' if there is no match for i in one_word.index: if re.match( r'(.*)([Bb]or)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Bored\" one_word # Let's have a look at the new dataframe .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 0 Happy 1 Irritated 2 Bored 3 Depression 4 Aimless ... ... 109 Worried 110 Okay 111 Bored 112 Juggling 113 Going with the flow 114 rows \u00d7 1 columns # Repeating the same steps to look for words that might have the same other words that might for i in one_word.index: if re.match( r'(.*)([cC]onc)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Concerned\" elif re.match( r'(.*)([wW]orr)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Worried\" elif re.match( r'(.*)([sS]car)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Scared\" one_word .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 0 Happy 1 Irritated 2 Bored 3 Depression 4 Aimless ... ... 109 Worried 110 Okay 111 Bored 112 Juggling 113 Going with the flow 114 rows \u00d7 1 columns for i in one_word.index: #print(one_word.iloc[i][0]) #print(re.match(r'B.*', str(one_word.iloc[i][0]))) if re.match( r'(.*)([gG]oo)(.*)', str(one_word.iloc[i][0])) != None: #print(one_word.iloc[i][0]) one_word.iloc[i] = \"Good\" elif re.match( r'(.*)([sS]ad)(.*)', str(one_word.iloc[i][0])) != None: #print(one_word.iloc[i][0]) one_word.iloc[i] = \"Sad\" one_word .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 0 Happy 1 Irritated 2 Bored 3 Depression 4 Aimless ... ... 109 Worried 110 Okay 111 Bored 112 Juggling 113 Going with the flow 114 rows \u00d7 1 columns for i in one_word.index: #print(one_word.iloc[i][0]) #print(re.match(r'B.*', str(one_word.iloc[i][0]))) if re.match( r'([aA]nx)(.*)', str(one_word.iloc[i][0])) != None: #print(one_word.iloc[i][0]) one_word.iloc[i] = \"Anxious\" elif re.match( r'(.*)([hH]ap)(.*)', str(one_word.iloc[i][0])) != None: #print(one_word.iloc[i][0]) one_word.iloc[i] = \"Happy\" one_word .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 0 Happy 1 Irritated 2 Bored 3 Depression 4 Aimless ... ... 109 Worried 110 Okay 111 Bored 112 Juggling 113 Going with the flow 114 rows \u00d7 1 columns for i in one_word.index: if re.match(r'(.*\\s.*\\s.*\\S)', str(one_word.iloc[i][0])) != None: print([i],one_word.iloc[i][0]) [10] Enjoying lockdown condition which never experienced in life [15] Learn something new [27] Lazy and tired [45] Feeling low due to current situation [47] Find a Cure for COVID-19 [48] Optimistic that this phase will pass away one day. [51] Faith in god [66] I am optimistic [69] Just want the country to do well [80] 80% Relaxed 20% anxious [89] Need work from home [101] Normal, as I am used to work from home [105] Self descipline, face situation be prepaired [113] Going with the flow one_word.iloc[10] = \"Enjoying\" one_word.iloc[15] = \"Good\" one_word.iloc[27] = \"Lazy\" one_word.iloc[45] = \"Low\" one_word.iloc[47] = \"Worried\" one_word.iloc[51] = \"Hopeful\" one_word.iloc[66] = \"Optimistic\" one_word.iloc[69] = \"Hopeful\" one_word.iloc[80] = \"Relaxed\" one_word.iloc[89] = \"Stressed\" one_word.iloc[101] = \"Normal\" one_word.iloc[105] = \"Prepared\" one_word.iloc[113] = \"Normal\" for i in one_word.index: if re.match(r'(.*\\s.*\\S)', str(one_word.iloc[i][0])) != None: print([i],one_word.iloc[i][0]) #one_word.iloc[i] = \"Bored\" #r'(.*\\s.*\\s.*\\S)' [22] Aai Baba [32] Active mood [48] Optimistic that this phase will pass away one day. [61] optimistic, peaceful for i in one_word.index: #print(one_word.iloc[i][0]) #print(re.match(r'B.*', str(one_word.iloc[i][0]))) if re.match( r'([oO]pt)(.*)', str(one_word.iloc[i][0])) != None: #print(one_word.iloc[i][0]) one_word.iloc[i] = \"Optimistic\" one_word.iloc[22] = \"Worried\" one_word.iloc[32] = \"Active\" one_word['ONE word that describes your mood right now.'].value_counts() Bored 20 Worried 7 Good 5 Anxious 5 Happy 5 Optimistic 4 Normal 4 Chill 4 Scared 3 Relaxed 3 Sad 2 Hopeful 2 Lazy 2 Calm 2 Tired 2 Stressed 2 Concerned 2 bewildered 1 Confused 1 Pessimistic 1 Depression 1 Content 1 Frustated 1 claustrophobic 1 Low 1 Frustrated 1 Tensed 1 Aimless 1 Exhausted 1 Praying 1 Imprisoned 1 Prayerful. 1 Okay 1 Juggling 1 Lazy 1 Contented 1 Annoyed 1 Hungry 1 Terrible 1 Enjoing 1 Aimless 1 Lethargic 1 Irritating 1 Tension 1 Angry 1 Enjoying 1 Irritated 1 Calm 1 Prepared 1 Depleted 1 Active 1 HAPPY 1 Busy 1 Energetic 1 Stressed 1 Distancing 1 Discouraged 1 Name: ONE word that describes your mood right now., dtype: int64 #covidDF = covidDF.append(one_word) #DF = [covidDF, one_word] #covidnewDF = pd.concat([covidDF, one_word], ignore_index=True) #one_word.columns = 'Mood in ONE word' covidDF['Mood in One Word'] = one_word['ONE word that describes your mood right now.'] covidDF.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Timestamp What is your occupation? Where do you spend most of your free time? How much time do you spend on streaming services? How much time do you spend on gaming? How much time do you spend on social media? What are you most worried about during this time? ONE word that describes your mood right now. Where are you located ? Mood in One Word 0 29/03/2020 00:22:00 Professional Other (Gardening, Cooking, Sleeping) > 3 hours 1 - 3 hours < 1 hour Family, Economy, Being stuck at home Happy NaN Happy 1 29/03/2020 00:26:52 Student Online Courses (Coursera, LinkedIn Learning, U... < 1 hour < 1 hour 1 - 3 hours Job, Family, Being stuck at home Irritated NaN Irritated 2 29/03/2020 00:37:44 Professional Online Courses (Coursera, LinkedIn Learning, U... > 3 hours < 1 hour 1 - 3 hours Job Bored NaN Bored 3 29/03/2020 00:38:23 Home-maker Social Media (Twitter, Instagram, Facebook) < 1 hour < 1 hour 1 - 3 hours Family Depression NaN Depression 4 29/03/2020 00:38:35 Professional Streaming services (Netflix, Amazon Prime, You... > 3 hours < 1 hour > 3 hours Job, Family Aimless NaN Aimless profession = ['Professional','Student','Home-maker','Retired'] for i in covidDF['What is your occupation?'].index: if covidDF.iloc[i][1] not in profession: #print(i,covidDF['What is your occupation?'].columns) print(i, covidDF.loc[i][1]) 13 Retired Mathematics Professor 47 Business 57 Nurse practitioner occ = pd.DataFrame(covidDF['What is your occupation?']).astype(str) covidDF['What is your occupation?'].value_counts() Professional 64 Student 35 Home-maker 7 Retired 5 Retired Mathematics Professor 1 Nurse practitioner 1 Business 1 Name: What is your occupation?, dtype: int64 occ.iloc[13]['What is your occupation?'] = \"Retired\" occ.iloc[47]['What is your occupation?'] = \"Professional\" occ.iloc[57]['What is your occupation?'] = \"Professional\" occ covidDF['Occupation'] = occ['What is your occupation?'] covidDF['Occupation'].value_counts() Professional 66 Student 35 Home-maker 7 Retired 6 Name: Occupation, dtype: int64 covidDF.isnull().sum() Timestamp 0 What is your occupation? 0 Where do you spend most of your free time? 0 How much time do you spend on streaming services? 4 How much time do you spend on gaming? 9 How much time do you spend on social media? 3 What are you most worried about during this time? 0 ONE word that describes your mood right now. 0 Where are you located ? 65 Mood in One Word 0 Occupation 0 dtype: int64 #covidDF['How much time do you spend on streaming services?'==].fillna(0) #covid = covidDF[covidDF['How much time do you spend on streaming services?'].isnull().sum() #covidDF['How much time do you spend on streaming services?'].isnull().value_counts() #covidDF['How much time do you spend on streaming services?']== '1 - 3 hours' #covidDF = covidDF['How much time do you spend on streaming services?'].fillna('< 1 hour') covidDF.loc[covidDF['How much time do you spend on gaming?'] == '< 1 hour',('Where do you spend most of your free time?')] #covidDF.loc[covidDF['How much time do you spend on gaming?'] == '< 1 hour','How much time do you spend on streaming services?'].value_counts() #covidDF.loc[covidDF['How much time do you spend on gaming?'] == '< 1 hour','How much time do you spend on gaming?'].value_counts() 1 Online Courses (Coursera, LinkedIn Learning, U... 2 Online Courses (Coursera, LinkedIn Learning, U... 3 Social Media (Twitter, Instagram, Facebook) 4 Streaming services (Netflix, Amazon Prime, You... 5 Other (Gardening, Cooking, Sleeping) ... 108 Streaming services (Netflix, Amazon Prime, You... 109 Other (Gardening, Cooking, Sleeping) 110 Other (Gardening, Cooking, Sleeping) 111 Streaming services (Netflix, Amazon Prime, You... 112 Streaming services (Netflix, Amazon Prime, You... Name: Where do you spend most of your free time?, Length: 88, dtype: object covidDF['How much time do you spend on streaming services?'] = covidDF['How much time do you spend on streaming services?'].fillna('< 1 hour') #covidDF.isnull().sum() covidDF['How much time do you spend on streaming services?'].isnull().sum() #covidDF 0 covidDF.isnull().sum() Timestamp 0 What is your occupation? 0 Where do you spend most of your free time? 0 How much time do you spend on streaming services? 0 How much time do you spend on gaming? 9 How much time do you spend on social media? 3 What are you most worried about during this time? 0 ONE word that describes your mood right now. 0 Where are you located ? 65 Mood in One Word 0 Occupation 0 dtype: int64 covidDF['How much time do you spend on gaming?'] = covidDF['How much time do you spend on gaming?'].fillna('< 1 hour') #covidDF.isnull().sum() covidDF['How much time do you spend on gaming?'].isnull().sum() #covidDF 0 covidDF['How much time do you spend on social media?'] = covidDF['How much time do you spend on social media?'].fillna('< 1 hour') #covidDF.isnull().sum() covidDF['How much time do you spend on social media?'].isnull().sum() #covidDF 0 covidDF['What are you most worried about during this time?'] 0 Family, Economy, Being stuck at home 1 Job, Family, Being stuck at home 2 Job 3 Family 4 Job, Family ... 109 Family 110 Family 111 Not necessary for you to know 112 Unknown Consequences later 113 Job, Family, Economy Name: What are you most worried about during this time?, Length: 114, dtype: object c = covidDF['What are you most worried about during this time?'].value_counts() c['Family'].sum() c Family 31 Economy 12 Being stuck at home 11 Job, Family, Economy 7 Job 7 Job, Family, Economy, Being stuck at home 7 Family, Economy, Being stuck at home 5 Job, Family 5 Job, Family, Being stuck at home 3 Family, Economy 3 Family, Being stuck at home 2 Job, Economy 2 Health 1 Overcoming the present situation 1 Lokha Sanastha dukkho Bhavantu 1 not worried as things will improve 1 Uni 1 Can\u2019t travel 1 How to keep healthy 1 Travel plans 1 Job, Economy, Being stuck at home 1 Job, Economy, Being stuck at home, My future 1 When will the situation be under control 1 Unknown Consequences later 1 To get more knowledge 1 Family, Education 1 Economy, Being stuck at home 1 Exams 1 Study. 1 Not necessary for you to know 1 Academic session and exams 1 Name: What are you most worried about during this time?, dtype: int64 looper = covidDF['What are you most worried about during this time?'] Family = [] for i in looper.index: #print(looper.iloc[i]) if re.match( r'(.*)[fF]am(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) Family.append(1) else: Family.append(0) print(Family) [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1] Economy = [] for i in looper.index: #print(looper.iloc[i]) if re.match( r'(.*)Econo(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) Economy.append(1) else: Economy.append(0) print(Economy) [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1] Job = [] for i in looper.index: #print(looper.iloc[i]) if re.match( r'(.*)Job(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) Job.append(1) else: Job.append(0) print(Job) [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1] Stuck = [] for i in looper.index: #print(looper.iloc[i]) if re.match( r'(.*)Being\\s[sS](.*)\\s(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) Stuck.append(1) else: Stuck.append(0) print(Stuck) [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0] other = [] for i in looper.index: #print(looper.iloc[i]) if re.match( r'(.*)Being\\s[sS](.*)\\s(.*)', str(looper.iloc[i])) != None or re.match(r'(.*)Job(.*)', str(looper.iloc[i])) != None or re.match(r'Fam(.*)', str(looper.iloc[i])) != None or re.match(r'(.*)Econo(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) other.append(0) else: other.append(1) print(other) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0] occupation_df = pd.DataFrame(list(zip(Stuck, Job, Economy, Family, other)), columns = ['Stuck','Job','Economy','Family','other']) cat = occupation_df.sum() cat.sum() occupation_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Stuck Job Economy Family other 0 1 0 1 1 0 1 1 1 0 1 0 2 0 1 0 0 0 3 0 0 0 1 0 4 0 1 0 1 0 ... ... ... ... ... ... 109 0 0 0 1 0 110 0 0 0 1 0 111 0 0 0 0 1 112 0 0 0 0 1 113 0 1 1 1 0 114 rows \u00d7 5 columns # covidDF['Mood in One Word'] = one_word['ONE word that describes your mood right now.'] covidDF[['Stuck','Job','Economy','Family','other']] = occupation_df[['Stuck','Job','Economy','Family','other']] covidDF covidDF.to_csv('COVID19_SurveyResponses.csv') covidDF['Occupation'].value_counts() Professional 66 Student 35 Home-maker 7 Retired 6 Name: Occupation, dtype: int64 #a=covidDF.copy()","title":"COVID"},{"location":"COVID/#covid19-survey-analysis","text":"# Importing pandas + numpy and reading the survey data into the dataframe - covidDF import pandas as pd import numpy as np covidDF = pd.read_csv(\"COVID-19 Survey (Responses) - Form responses 1.csv\") covidDF.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Timestamp What is your occupation? Where do you spend most of your free time? How much time do you spend on streaming services? How much time do you spend on gaming? How much time do you spend on social media? What are you most worried about during this time? ONE word that describes your mood right now. Where are you located ? 0 29/03/2020 00:22:00 Professional Other (Gardening, Cooking, Sleeping) > 3 hours 1 - 3 hours < 1 hour Family, Economy, Being stuck at home Happy NaN 1 29/03/2020 00:26:52 Student Online Courses (Coursera, LinkedIn Learning, U... < 1 hour < 1 hour 1 - 3 hours Job, Family, Being stuck at home Irritated NaN 2 29/03/2020 00:37:44 Professional Online Courses (Coursera, LinkedIn Learning, U... > 3 hours < 1 hour 1 - 3 hours Job Bored NaN 3 29/03/2020 00:38:23 Home-maker Social Media (Twitter, Instagram, Facebook) < 1 hour < 1 hour 1 - 3 hours Family Depression NaN 4 29/03/2020 00:38:35 Professional Streaming services (Netflix, Amazon Prime, You... > 3 hours < 1 hour > 3 hours Job, Family Aimless NaN # Checking if the dataframe has null values covidDF.isnull().sum() #displays entire dataframe with null and non-null values Timestamp 0 What is your occupation? 0 Where do you spend most of your free time? 0 How much time do you spend on streaming services? 4 How much time do you spend on gaming? 9 How much time do you spend on social media? 3 What are you most worried about during this time? 0 ONE word that describes your mood right now. 0 Where are you located ? 65 dtype: int64 covidDF.describe() # an overview .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Timestamp What is your occupation? Where do you spend most of your free time? How much time do you spend on streaming services? How much time do you spend on gaming? How much time do you spend on social media? What are you most worried about during this time? ONE word that describes your mood right now. Where are you located ? count 114 114 114 110 105 111 114 114 49 unique 114 7 6 3 3 3 31 87 4 top 29/03/2020 11:26:31 Professional Other (Gardening, Cooking, Sleeping) 1 - 3 hours < 1 hour 1 - 3 hours Family Bored USA freq 1 64 34 57 88 55 31 9 25 # The last column 'ONE word that describes your mood right now.' is a free text field # However some respondents have replied in more than one word. We can edit this field by grouping similar words or feelings into a single word import re # RegEx # creating a dataframe with only the required column which can be later merger with the original dataframe CovidDF one_word = pd.DataFrame(covidDF[\"ONE word that describes your mood right now.\"]).astype(str) # The re.match function returns a 'None' if there is no match for i in one_word.index: if re.match( r'(.*)([Bb]or)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Bored\" one_word # Let's have a look at the new dataframe .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 0 Happy 1 Irritated 2 Bored 3 Depression 4 Aimless ... ... 109 Worried 110 Okay 111 Bored 112 Juggling 113 Going with the flow 114 rows \u00d7 1 columns # Repeating the same steps to look for words that might have the same other words that might for i in one_word.index: if re.match( r'(.*)([cC]onc)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Concerned\" elif re.match( r'(.*)([wW]orr)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Worried\" elif re.match( r'(.*)([sS]car)(.*)', str(one_word.iloc[i][0])) != None: one_word.iloc[i] = \"Scared\" one_word .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 0 Happy 1 Irritated 2 Bored 3 Depression 4 Aimless ... ... 109 Worried 110 Okay 111 Bored 112 Juggling 113 Going with the flow 114 rows \u00d7 1 columns for i in one_word.index: #print(one_word.iloc[i][0]) #print(re.match(r'B.*', str(one_word.iloc[i][0]))) if re.match( r'(.*)([gG]oo)(.*)', str(one_word.iloc[i][0])) != None: #print(one_word.iloc[i][0]) one_word.iloc[i] = \"Good\" elif re.match( r'(.*)([sS]ad)(.*)', str(one_word.iloc[i][0])) != None: #print(one_word.iloc[i][0]) one_word.iloc[i] = \"Sad\" one_word .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 0 Happy 1 Irritated 2 Bored 3 Depression 4 Aimless ... ... 109 Worried 110 Okay 111 Bored 112 Juggling 113 Going with the flow 114 rows \u00d7 1 columns for i in one_word.index: #print(one_word.iloc[i][0]) #print(re.match(r'B.*', str(one_word.iloc[i][0]))) if re.match( r'([aA]nx)(.*)', str(one_word.iloc[i][0])) != None: #print(one_word.iloc[i][0]) one_word.iloc[i] = \"Anxious\" elif re.match( r'(.*)([hH]ap)(.*)', str(one_word.iloc[i][0])) != None: #print(one_word.iloc[i][0]) one_word.iloc[i] = \"Happy\" one_word .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } ONE word that describes your mood right now. 0 Happy 1 Irritated 2 Bored 3 Depression 4 Aimless ... ... 109 Worried 110 Okay 111 Bored 112 Juggling 113 Going with the flow 114 rows \u00d7 1 columns for i in one_word.index: if re.match(r'(.*\\s.*\\s.*\\S)', str(one_word.iloc[i][0])) != None: print([i],one_word.iloc[i][0]) [10] Enjoying lockdown condition which never experienced in life [15] Learn something new [27] Lazy and tired [45] Feeling low due to current situation [47] Find a Cure for COVID-19 [48] Optimistic that this phase will pass away one day. [51] Faith in god [66] I am optimistic [69] Just want the country to do well [80] 80% Relaxed 20% anxious [89] Need work from home [101] Normal, as I am used to work from home [105] Self descipline, face situation be prepaired [113] Going with the flow one_word.iloc[10] = \"Enjoying\" one_word.iloc[15] = \"Good\" one_word.iloc[27] = \"Lazy\" one_word.iloc[45] = \"Low\" one_word.iloc[47] = \"Worried\" one_word.iloc[51] = \"Hopeful\" one_word.iloc[66] = \"Optimistic\" one_word.iloc[69] = \"Hopeful\" one_word.iloc[80] = \"Relaxed\" one_word.iloc[89] = \"Stressed\" one_word.iloc[101] = \"Normal\" one_word.iloc[105] = \"Prepared\" one_word.iloc[113] = \"Normal\" for i in one_word.index: if re.match(r'(.*\\s.*\\S)', str(one_word.iloc[i][0])) != None: print([i],one_word.iloc[i][0]) #one_word.iloc[i] = \"Bored\" #r'(.*\\s.*\\s.*\\S)' [22] Aai Baba [32] Active mood [48] Optimistic that this phase will pass away one day. [61] optimistic, peaceful for i in one_word.index: #print(one_word.iloc[i][0]) #print(re.match(r'B.*', str(one_word.iloc[i][0]))) if re.match( r'([oO]pt)(.*)', str(one_word.iloc[i][0])) != None: #print(one_word.iloc[i][0]) one_word.iloc[i] = \"Optimistic\" one_word.iloc[22] = \"Worried\" one_word.iloc[32] = \"Active\" one_word['ONE word that describes your mood right now.'].value_counts() Bored 20 Worried 7 Good 5 Anxious 5 Happy 5 Optimistic 4 Normal 4 Chill 4 Scared 3 Relaxed 3 Sad 2 Hopeful 2 Lazy 2 Calm 2 Tired 2 Stressed 2 Concerned 2 bewildered 1 Confused 1 Pessimistic 1 Depression 1 Content 1 Frustated 1 claustrophobic 1 Low 1 Frustrated 1 Tensed 1 Aimless 1 Exhausted 1 Praying 1 Imprisoned 1 Prayerful. 1 Okay 1 Juggling 1 Lazy 1 Contented 1 Annoyed 1 Hungry 1 Terrible 1 Enjoing 1 Aimless 1 Lethargic 1 Irritating 1 Tension 1 Angry 1 Enjoying 1 Irritated 1 Calm 1 Prepared 1 Depleted 1 Active 1 HAPPY 1 Busy 1 Energetic 1 Stressed 1 Distancing 1 Discouraged 1 Name: ONE word that describes your mood right now., dtype: int64 #covidDF = covidDF.append(one_word) #DF = [covidDF, one_word] #covidnewDF = pd.concat([covidDF, one_word], ignore_index=True) #one_word.columns = 'Mood in ONE word' covidDF['Mood in One Word'] = one_word['ONE word that describes your mood right now.'] covidDF.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Timestamp What is your occupation? Where do you spend most of your free time? How much time do you spend on streaming services? How much time do you spend on gaming? How much time do you spend on social media? What are you most worried about during this time? ONE word that describes your mood right now. Where are you located ? Mood in One Word 0 29/03/2020 00:22:00 Professional Other (Gardening, Cooking, Sleeping) > 3 hours 1 - 3 hours < 1 hour Family, Economy, Being stuck at home Happy NaN Happy 1 29/03/2020 00:26:52 Student Online Courses (Coursera, LinkedIn Learning, U... < 1 hour < 1 hour 1 - 3 hours Job, Family, Being stuck at home Irritated NaN Irritated 2 29/03/2020 00:37:44 Professional Online Courses (Coursera, LinkedIn Learning, U... > 3 hours < 1 hour 1 - 3 hours Job Bored NaN Bored 3 29/03/2020 00:38:23 Home-maker Social Media (Twitter, Instagram, Facebook) < 1 hour < 1 hour 1 - 3 hours Family Depression NaN Depression 4 29/03/2020 00:38:35 Professional Streaming services (Netflix, Amazon Prime, You... > 3 hours < 1 hour > 3 hours Job, Family Aimless NaN Aimless profession = ['Professional','Student','Home-maker','Retired'] for i in covidDF['What is your occupation?'].index: if covidDF.iloc[i][1] not in profession: #print(i,covidDF['What is your occupation?'].columns) print(i, covidDF.loc[i][1]) 13 Retired Mathematics Professor 47 Business 57 Nurse practitioner occ = pd.DataFrame(covidDF['What is your occupation?']).astype(str) covidDF['What is your occupation?'].value_counts() Professional 64 Student 35 Home-maker 7 Retired 5 Retired Mathematics Professor 1 Nurse practitioner 1 Business 1 Name: What is your occupation?, dtype: int64 occ.iloc[13]['What is your occupation?'] = \"Retired\" occ.iloc[47]['What is your occupation?'] = \"Professional\" occ.iloc[57]['What is your occupation?'] = \"Professional\" occ covidDF['Occupation'] = occ['What is your occupation?'] covidDF['Occupation'].value_counts() Professional 66 Student 35 Home-maker 7 Retired 6 Name: Occupation, dtype: int64 covidDF.isnull().sum() Timestamp 0 What is your occupation? 0 Where do you spend most of your free time? 0 How much time do you spend on streaming services? 4 How much time do you spend on gaming? 9 How much time do you spend on social media? 3 What are you most worried about during this time? 0 ONE word that describes your mood right now. 0 Where are you located ? 65 Mood in One Word 0 Occupation 0 dtype: int64 #covidDF['How much time do you spend on streaming services?'==].fillna(0) #covid = covidDF[covidDF['How much time do you spend on streaming services?'].isnull().sum() #covidDF['How much time do you spend on streaming services?'].isnull().value_counts() #covidDF['How much time do you spend on streaming services?']== '1 - 3 hours' #covidDF = covidDF['How much time do you spend on streaming services?'].fillna('< 1 hour') covidDF.loc[covidDF['How much time do you spend on gaming?'] == '< 1 hour',('Where do you spend most of your free time?')] #covidDF.loc[covidDF['How much time do you spend on gaming?'] == '< 1 hour','How much time do you spend on streaming services?'].value_counts() #covidDF.loc[covidDF['How much time do you spend on gaming?'] == '< 1 hour','How much time do you spend on gaming?'].value_counts() 1 Online Courses (Coursera, LinkedIn Learning, U... 2 Online Courses (Coursera, LinkedIn Learning, U... 3 Social Media (Twitter, Instagram, Facebook) 4 Streaming services (Netflix, Amazon Prime, You... 5 Other (Gardening, Cooking, Sleeping) ... 108 Streaming services (Netflix, Amazon Prime, You... 109 Other (Gardening, Cooking, Sleeping) 110 Other (Gardening, Cooking, Sleeping) 111 Streaming services (Netflix, Amazon Prime, You... 112 Streaming services (Netflix, Amazon Prime, You... Name: Where do you spend most of your free time?, Length: 88, dtype: object covidDF['How much time do you spend on streaming services?'] = covidDF['How much time do you spend on streaming services?'].fillna('< 1 hour') #covidDF.isnull().sum() covidDF['How much time do you spend on streaming services?'].isnull().sum() #covidDF 0 covidDF.isnull().sum() Timestamp 0 What is your occupation? 0 Where do you spend most of your free time? 0 How much time do you spend on streaming services? 0 How much time do you spend on gaming? 9 How much time do you spend on social media? 3 What are you most worried about during this time? 0 ONE word that describes your mood right now. 0 Where are you located ? 65 Mood in One Word 0 Occupation 0 dtype: int64 covidDF['How much time do you spend on gaming?'] = covidDF['How much time do you spend on gaming?'].fillna('< 1 hour') #covidDF.isnull().sum() covidDF['How much time do you spend on gaming?'].isnull().sum() #covidDF 0 covidDF['How much time do you spend on social media?'] = covidDF['How much time do you spend on social media?'].fillna('< 1 hour') #covidDF.isnull().sum() covidDF['How much time do you spend on social media?'].isnull().sum() #covidDF 0 covidDF['What are you most worried about during this time?'] 0 Family, Economy, Being stuck at home 1 Job, Family, Being stuck at home 2 Job 3 Family 4 Job, Family ... 109 Family 110 Family 111 Not necessary for you to know 112 Unknown Consequences later 113 Job, Family, Economy Name: What are you most worried about during this time?, Length: 114, dtype: object c = covidDF['What are you most worried about during this time?'].value_counts() c['Family'].sum() c Family 31 Economy 12 Being stuck at home 11 Job, Family, Economy 7 Job 7 Job, Family, Economy, Being stuck at home 7 Family, Economy, Being stuck at home 5 Job, Family 5 Job, Family, Being stuck at home 3 Family, Economy 3 Family, Being stuck at home 2 Job, Economy 2 Health 1 Overcoming the present situation 1 Lokha Sanastha dukkho Bhavantu 1 not worried as things will improve 1 Uni 1 Can\u2019t travel 1 How to keep healthy 1 Travel plans 1 Job, Economy, Being stuck at home 1 Job, Economy, Being stuck at home, My future 1 When will the situation be under control 1 Unknown Consequences later 1 To get more knowledge 1 Family, Education 1 Economy, Being stuck at home 1 Exams 1 Study. 1 Not necessary for you to know 1 Academic session and exams 1 Name: What are you most worried about during this time?, dtype: int64 looper = covidDF['What are you most worried about during this time?'] Family = [] for i in looper.index: #print(looper.iloc[i]) if re.match( r'(.*)[fF]am(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) Family.append(1) else: Family.append(0) print(Family) [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1] Economy = [] for i in looper.index: #print(looper.iloc[i]) if re.match( r'(.*)Econo(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) Economy.append(1) else: Economy.append(0) print(Economy) [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1] Job = [] for i in looper.index: #print(looper.iloc[i]) if re.match( r'(.*)Job(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) Job.append(1) else: Job.append(0) print(Job) [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1] Stuck = [] for i in looper.index: #print(looper.iloc[i]) if re.match( r'(.*)Being\\s[sS](.*)\\s(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) Stuck.append(1) else: Stuck.append(0) print(Stuck) [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0] other = [] for i in looper.index: #print(looper.iloc[i]) if re.match( r'(.*)Being\\s[sS](.*)\\s(.*)', str(looper.iloc[i])) != None or re.match(r'(.*)Job(.*)', str(looper.iloc[i])) != None or re.match(r'Fam(.*)', str(looper.iloc[i])) != None or re.match(r'(.*)Econo(.*)', str(looper.iloc[i])) != None: #print(looper.iloc[i]) other.append(0) else: other.append(1) print(other) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0] occupation_df = pd.DataFrame(list(zip(Stuck, Job, Economy, Family, other)), columns = ['Stuck','Job','Economy','Family','other']) cat = occupation_df.sum() cat.sum() occupation_df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Stuck Job Economy Family other 0 1 0 1 1 0 1 1 1 0 1 0 2 0 1 0 0 0 3 0 0 0 1 0 4 0 1 0 1 0 ... ... ... ... ... ... 109 0 0 0 1 0 110 0 0 0 1 0 111 0 0 0 0 1 112 0 0 0 0 1 113 0 1 1 1 0 114 rows \u00d7 5 columns # covidDF['Mood in One Word'] = one_word['ONE word that describes your mood right now.'] covidDF[['Stuck','Job','Economy','Family','other']] = occupation_df[['Stuck','Job','Economy','Family','other']] covidDF covidDF.to_csv('COVID19_SurveyResponses.csv') covidDF['Occupation'].value_counts() Professional 66 Student 35 Home-maker 7 Retired 6 Name: Occupation, dtype: int64 #a=covidDF.copy()","title":"Covid19 Survey Analysis"}]}